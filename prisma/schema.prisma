// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Gender {
  male
  female
}

enum Roles {
  admin
  contributor
  member
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  username      String?   @unique
  gender        Gender?
  role          Roles?    @default(member)
  peoples       People[]
  posts         Post[]
  reviews       Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, username])
  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Country {
  id      String   @id @default(cuid())
  name    String
  slug    String   @unique
  peoples People[]
  posts   Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("country")
}

model Category {
  id    String @id @default(cuid())
  name  String
  slug  String @unique
  posts Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("category")
}

model People {
  id           String   @id @default(cuid())
  name         String
  slug         String   @unique
  bio          String
  gender       Gender
  avatar       String?
  birthDate    DateTime
  nativeName   String?
  countryId    String
  nationality  Country  @relation(fields: [countryId], references: [id])
  lastEditById String
  authors      User[]
  casts        Cast[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("peoples")
}

model Post {
  id            String     @id @default(cuid())
  title         String
  alsoKnownAs   String?    @map("also_known_as")
  nativeTitle   String?    @map("native_title")
  slug          String     @unique
  content       String
  poster        String?
  trailer       String?
  lastEditBy    String     @map("last_edit_by")
  authors       User[]
  categories    Category[]
  countries     Country[]
  casts         Cast[]
  reviews       Review[]
  status        PostStatus @default(draft)
  contentRating String?    @map("content_rating")
  screenWriter  String?    @map("screen_writer")
  director      String?
  type          String
  releaseDate   DateTime?  @map("release_date")
  producer      String?
  episodes      Int?
  airedStart    DateTime?
  airedEnd      DateTime?
  airedOn       String?
  network       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("posts")
}

enum PostStatus {
  draft
  pending
  public
}

model Cast {
  id            String  @id @default(cuid())
  characterName String? @map("character_name")
  people        People  @relation(fields: [peopleId], references: [id])
  peopleId      String
  postId        String?
  post          Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("casts")
}

model Review {
  id      String  @id @default(uuid())
  value   Int
  content String
  postId  String?
  post    Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId  String
  author  User    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}
